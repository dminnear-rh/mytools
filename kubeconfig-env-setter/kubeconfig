#!/usr/bin/env bash
# kubeconfig - Manage your KUBECONFIG environment variable interactively.
#
# This script must be sourced to update your current shell environment.
#
# Usage:
#   source kubeconfig [command] [arguments]
#
# Commands:
#   help, --help         Show this help message.
#   unset                Unset the KUBECONFIG environment variable.
#   search               List known kubeconfig files.
#   set [FILE]           Set the KUBECONFIG environment variable.
#                        If FILE is provided, it must be a valid kubeconfig file.
#                        If FILE is omitted, you'll be prompted to choose from known kubeconfig files.
#
# With no command: prints the current KUBECONFIG value.

# --- Sourcing Check ---
(return 0 2>/dev/null) || { 
    echo "Error: Please source this script, e.g.: 'source kubeconfig [command] [arguments]'" 
    exit 1 
}

# --- Usage Function ---
usage() {
    cat <<EOF
Usage: source kubeconfig [command] [arguments]

Commands:
  help, --help         Show this help message.
  unset                Unset the KUBECONFIG environment variable.
  search               List known kubeconfig files.
  set [FILE]           Set the KUBECONFIG environment variable.
                       If FILE is provided, it must be a valid kubeconfig file.
                       If FILE is not provided, you'll be prompted to choose from known kubeconfig files.

No command: prints the current KUBECONFIG value.
EOF
}

# --- Validate a kubeconfig File ---
validate_kubeconfig() {
    local file="$1"
    if [ ! -f "$file" ]; then
        echo "Error: File '$file' does not exist."
        return 1
    fi
    if ! grep -q "kind: Config" "$file"; then
        echo "Error: File '$file' does not appear to be a valid Kubernetes config (missing 'kind: Config')."
        return 1
    fi
    return 0
}

# --- Find Known kubeconfig Files ---
find_kubeconfigs() {
    local files=()
    # Enable nullglob in bash or zsh.
    if [ -n "$ZSH_VERSION" ]; then
        setopt nullglob 2>/dev/null
    else
        shopt -s nullglob 2>/dev/null
    fi

    # Look in common locations.
    [ -f "$HOME/.kube/config" ] && files+=("$HOME/.kube/config")
    for f in "$HOME"/clusters/hcp/*/kubeconfig; do
        [ -f "$f" ] && files+=("$f")
    done
    for f in "$HOME"/*/auth/kubeconfig; do
        [ -f "$f" ] && files+=("$f")
    done
    [ -f "$HOME/.kube/kubeconfig" ] && files+=("$HOME/.kube/kubeconfig")

    local valid_files=()
    for file in "${files[@]}"; do
        if grep -q "kind: Config" "$file"; then
            valid_files+=("$file")
        fi
    done
    # Populate global variable.
    KUBE_CONFIG_LIST=("${valid_files[@]}")
}

# --- Print kubeconfig Files ---
print_kubeconfigs() {
    if [ "${#KUBE_CONFIG_LIST[@]}" -eq 0 ]; then
        echo "No kubeconfig files found."
    else
        echo "Found kubeconfig files:"
        if [ -n "$ZSH_VERSION" ]; then
            # In zsh, arrays are 1-indexed.
            for i in $(seq 1 "${#KUBE_CONFIG_LIST[@]}"); do
                echo "$i): ${KUBE_CONFIG_LIST[$i]}"
            done
        else
            for i in "${!KUBE_CONFIG_LIST[@]}"; do
                echo "$((i+1))): ${KUBE_CONFIG_LIST[$i]}"
            done
        fi
    fi
}

# --- Command Processing ---
if [ "$#" -eq 0 ]; then
    if [ -z "$KUBECONFIG" ]; then
        echo "KUBECONFIG is not set."
    else
        echo "Current KUBECONFIG: $KUBECONFIG"
    fi
    return 0
fi

case "$1" in
    help|--help)
        usage
        ;;
    unset)
        unset KUBECONFIG
        echo "KUBECONFIG has been unset."
        ;;
    search)
        find_kubeconfigs
        print_kubeconfigs
        ;;
    set)
        if [ "$#" -ge 2 ]; then
            # Directly set from the provided file argument.
            file="$2"
            if validate_kubeconfig "$file"; then
                export KUBECONFIG="$file"
                echo "KUBECONFIG set to '$file'."
            fi
        else
            # No file argument provided; prompt the user.
            find_kubeconfigs
            if [ "${#KUBE_CONFIG_LIST[@]}" -eq 0 ]; then
                echo "No valid kubeconfig files found to select from."
                return 1
            fi

            print_kubeconfigs
            echo "Select a kubeconfig file to set:"

            # Prompt for input using shell-appropriate syntax.
            if [ -n "$ZSH_VERSION" ]; then
                read "?Enter number: " choice
            else
                read -p "Enter number: " choice
            fi

            if ! [[ "$choice" =~ ^[0-9]+$ ]]; then
                echo "Invalid selection."
                return 1
            fi

            if [ -n "$ZSH_VERSION" ]; then
                index="$choice"
                if [ "$index" -ge 1 ] && [ "$index" -le "${#KUBE_CONFIG_LIST[@]}" ]; then
                    selected="${KUBE_CONFIG_LIST[$index]}"
                    export KUBECONFIG="$selected"
                    echo "KUBECONFIG set to '$selected'."
                else
                    echo "Invalid selection."
                    return 1
                fi
            else
                index=$((choice - 1))
                if [ "$index" -ge 0 ] && [ "$index" -lt "${#KUBE_CONFIG_LIST[@]}" ]; then
                    selected="${KUBE_CONFIG_LIST[$index]}"
                    export KUBECONFIG="$selected"
                    echo "KUBECONFIG set to '$selected'."
                else
                    echo "Invalid selection."
                    return 1
                fi
            fi
        fi
        ;;
    *)
        echo "Unrecognized command or argument."
        usage
        ;;
esac
